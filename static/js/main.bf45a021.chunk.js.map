{"version":3,"sources":["ScreenThree.tsx","ScreenOne.tsx","ScreenTwo.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["donationSites","name","url","DonationOption","props","DonationContainer","DonationLink","href","target","ScreenThree","Container","Content","style","fontSize","fontWeight","marginBottom","map","site","key","styled","div","attrs","className","a","ScreenOne","React","setTimeout","nextScreen","animationDuration","animationDelay","zeroPad","num","slice","renderer","opts","minutes","seconds","ScreenTwo","Image","margin","width","textAlign","date","Date","now","onComplete","img","src","alt","App","useState","screenIndex","setScreenIndex","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wkCAGA,IAAMA,EAAsD,CAC1D,CACEC,KAAM,mBACNC,IAAK,4BAEP,CACED,KAAM,qBACNC,IAAK,iCAEP,CACED,KAAM,2BACNC,IAAK,mCAEP,CACED,KAAM,yBACNC,IAAK,qCAEP,CACED,KAAM,qBACNC,IAAK,iCAEP,CACED,KAAM,2BACNC,IAAK,6BAEP,CACED,KAAM,8CACNC,IAAK,0BAEP,CACED,KAAM,OACNC,IAAK,+CAIHC,EAAiB,SAACC,GACtB,OACE,gBAACC,EAAD,KACE,gBAACC,EAAD,CAAcC,KAAMH,EAAMF,IAAKM,OAAO,UACnCJ,EAAMH,QAoBAQ,EAdK,WAClB,OACE,gBAACC,EAAD,KACE,gBAACC,EAAD,KACE,sBAAIC,MAAO,CAAEC,SAAU,GAAIC,WAAY,MAAvC,WACA,sBAAIF,MAAO,CAAEG,aAAc,MAC1Bf,EAAcgB,KAAI,SAACC,GAAD,OACjB,gBAAC,EAAD,CAAgBC,IAAKD,EAAKf,IAAKD,KAAMgB,EAAKhB,KAAMC,IAAKe,EAAKf,YAS9DQ,EAAYS,IAAOC,IAAV,KAaTT,EAAUQ,IAAOC,IAAIC,MAAM,CAACC,UAAU,qCAA5BH,CAAH,KAOPd,EAAoBc,IAAOC,IAAV,KAKjBd,EAAea,IAAOI,EAAV,K,wWCtFlB,IA0BeC,EA1BG,SAACpB,GAMjB,OALAqB,aAAgB,WACdC,YAAW,kBAAMtB,EAAMuB,eAAc,OAEpC,IAGD,gBAAC,EAAD,KACE,yBACE,wBACEL,UAAU,oCACVV,MAAO,CAAEgB,kBAAmB,KAAMC,eAAgB,SAFpD,iBAMA,wBACEP,UAAU,oCACVV,MAAO,CAAEgB,kBAAmB,KAAMC,eAAgB,SAFpD,2BAaFnB,EAAYS,IAAOC,IAAV,K,4jBC3Bf,IAEMU,EAAU,SAACC,GAAD,OAAkB,IAAMA,GAAKC,OAAO,IAE9CC,EAAW,SAACC,GAAD,gBACZJ,EAAQI,EAAKC,SADD,YACaL,EAAQI,EAAKE,WAyB5BC,EAvBG,SAACjC,GACjB,OACE,gBAAC,EAAD,KACE,gBAACkC,EAAD,MACA,qBACEhB,UAAU,oCACVV,MAAO,CACL2B,OAAQ,GACRC,MAAO,IACPC,UAAW,OACXZ,eAAgB,OAGlB,gBAAC,IAAD,CACEa,KAAMC,KAAKC,MArBY,MAqBuB,IAC9CX,SAAUA,EACVY,WAAYzC,EAAMuB,gBAStBjB,EAAYS,IAAOC,IAAV,KAiBTkB,EAAQnB,IAAO2B,IAAIzB,MAAM,CAC7B0B,IAAK,0DACLzB,UAAW,oCACX0B,IACE,2FAJU7B,CAAH,KChCI8B,EAhBH,WAAO,IAAD,EACsBxB,IAAMyB,SAAS,GADrC,mBACTC,EADS,KACIC,EADJ,KAGVzB,EAAa,WACjByB,EAAeD,EAAc,IAG/B,OAAoB,IAAhBA,EACK,kBAAC,EAAD,CAAWxB,WAAYA,IAEZ,IAAhBwB,EACK,kBAAC,EAAD,CAAWxB,WAAYA,IAEzB,kBAAC,EAAD,OCNW0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bf45a021.chunk.js","sourcesContent":["import * as React from \"react\"\nimport styled from \"styled-components\"\n\nconst donationSites: Array<{ name: string; url: string }> = [\n  {\n    name: \"The Bail Project\",\n    url: \"https://bailproject.org/\",\n  },\n  {\n    name: \"Black Lives Matter\",\n    url: \"https://blacklivesmatter.com/\",\n  },\n  {\n    name: \"Black Visions Collective\",\n    url: \"https://www.blackvisionsmn.org/\",\n  },\n  {\n    name: \"Minnesota Freedom Fund\",\n    url: \"https://minnesotafreedomfund.org/\",\n  },\n  {\n    name: \"Brookyln Bail Fund\",\n    url: \"https://brooklynbailfund.org/\",\n  },\n  {\n    name: \"NAACP Legal Defense Fund\",\n    url: \"https://www.naacpldf.org/\",\n  },\n  {\n    name: \"Communities United Against Police Brutality\",\n    url: \"https://www.cuapb.org/\",\n  },\n  {\n    name: \"ACLU\",\n    url: \"https://www.aclu.org/issues/racial-justice\",\n  },\n]\n\nconst DonationOption = (props: { name: string; url: string }) => {\n  return (\n    <DonationContainer>\n      <DonationLink href={props.url} target=\"_blank\">\n        {props.name}\n      </DonationLink>\n    </DonationContainer>\n  )\n}\n\nconst ScreenThree = () => {\n  return (\n    <Container>\n      <Content>\n        <h1 style={{ fontSize: 52, fontWeight: 900 }}>Donate.</h1>\n        <hr style={{ marginBottom: 50 }} />\n        {donationSites.map((site) => (\n          <DonationOption key={site.url} name={site.name} url={site.url} />\n        ))}\n      </Content>\n    </Container>\n  )\n}\n\nexport default ScreenThree\n\nconst Container = styled.div`\n  min-height: 100vh;\n  min-width: 100vw;\n  box-sizing: border-box;\n  padding: 30px;\n  text-align: left;\n  background: black;\n  color: white;\n  display: flex;\n  justify-content: center;\n  font-family: \"PT Serif\", serif;\n`\n\nconst Content = styled.div.attrs({className: `animate__animated animate__fadeIn`})`\n  width: 80%;\n  max-width: 700px;\n  animation-duration: 7s;\n  animation-delay: 5s;\n`\n\nconst DonationContainer = styled.div`\n  width: 100%;\n  margin-bottom: 25px;\n`\n\nconst DonationLink = styled.a`\n  width: 100%;\n  background: #001064;\n  color: white;\n  padding: 30px;\n  box-sizing: border-box;\n  font-weight: bold;\n  font-size: 32px;\n  border-radius: 10px;\n  display: block;\n`\n","import * as React from \"react\"\nimport styled from \"styled-components\"\n\nconst ScreenOne = (props: { nextScreen: () => void }) => {\n  React.useEffect(() => {\n    setTimeout(() => props.nextScreen(), 8000)\n     // eslint-disable-next-line\n  }, [])\n\n  return (\n    <Container>\n      <p>\n        <span\n          className=\"animate__animated animate__fadeIn\"\n          style={{ animationDuration: \"3s\", animationDelay: \"0.7s\" }}\n        >\n          Eight minutes\n        </span>\n        <span\n          className=\"animate__animated animate__fadeIn\"\n          style={{ animationDuration: \"3s\", animationDelay: \"3.6s\" }}\n        >\n          , forty-six seconds.\n        </span>\n      </p>\n    </Container>\n  )\n}\n\nexport default ScreenOne\n\nconst Container = styled.div`\n  height: 100vh;\n  width: 100vw;\n  box-sizing: border-box;\n  padding: 30px;\n  text-align: center;\n  background: black;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-weight: bold;\n  font-size: 42px;\n  font-family: \"PT Serif\", serif;\n`\n","import * as React from \"react\"\nimport styled from \"styled-components\"\nimport Countdown, { CountdownRenderProps } from \"react-countdown\"\n\nconst EIGHT_MINUTES_46_SECONDS = 526000\n\nconst zeroPad = (num: number) => (\"0\" + num).slice(-2)\n\nconst renderer = (opts: CountdownRenderProps) =>\n  `${zeroPad(opts.minutes)}:${zeroPad(opts.seconds)}`\n\nconst ScreenTwo = (props: { nextScreen: () => void }) => {\n  return (\n    <Container>\n      <Image />\n      <p\n        className=\"animate__animated animate__fadeIn\"\n        style={{\n          margin: 25,\n          width: 200,\n          textAlign: \"left\",\n          animationDelay: \"5s\",\n        }}\n      >\n        <Countdown\n          date={Date.now() + EIGHT_MINUTES_46_SECONDS + 5000}\n          renderer={renderer}\n          onComplete={props.nextScreen}\n        />\n      </p>\n    </Container>\n  )\n}\n\nexport default ScreenTwo\n\nconst Container = styled.div`\n  height: 100vh;\n  width: 100vw;\n  box-sizing: border-box;\n  padding: 30px;\n  text-align: center;\n  background: black;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-weight: bold;\n  flex-wrap: wrap;\n  font-size: 72px;\n  font-family: \"PT Serif\", serif;\n`\n\nconst Image = styled.img.attrs({\n  src: \"https://eightminutesfortysixseconds.com/georgefloyd.png\",\n  className: \"animate__animated animate__fadeIn\",\n  alt:\n    \"Police officer Derek Chauvin kneeling on George Floyd's neck, leading to Floyd's death.\",\n})`\n  border-radius: 7px;\n  margin: 20px;\n  @media only screen and (max-height: 600px) {\n    height: 250px;\n  }\n`\n","import React from \"react\"\nimport ScreenThree from \"./ScreenThree\"\nimport ScreenOne from \"./ScreenOne\"\nimport ScreenTwo from \"./ScreenTwo\"\n\nconst App = () => {\n  const [screenIndex, setScreenIndex] = React.useState(0)\n\n  const nextScreen = () => {\n    setScreenIndex(screenIndex + 1)\n  }\n\n  if (screenIndex === 0) {\n    return <ScreenOne nextScreen={nextScreen} />\n  }\n  if (screenIndex === 1) {\n    return <ScreenTwo nextScreen={nextScreen} />\n  }\n  return <ScreenThree />\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}